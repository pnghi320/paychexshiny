else if (input$model == "Tensorflow"){
x <- serviceList
}
else if (input$model == "ETS"){
x <- c("Choose one" = "", "ESTservice1",
"ESTservice2",
"ESTservice3")
}
else if (input$model == "Seasonal naive"){
x <- c("Choose one" = "", "Seasonalservice1",
"Seasonalservice2",
"Seasonalservice3")
}
else{
x <- character(0);
}
updatePickerInput(session = session, inputId = "service",
choices = x)
}, ignoreInit = TRUE)
observeEvent(input$service, {
if (input$model == "Tensorflow"){
y <- metricList
}
else if (input$service == "Arimaservice1"){
y <- c("Choose one" = "", "Arimametric1",
"Arimametric2",
"Arimametric3")
}
else if (input$service == "Arimaservice2"){
y <- c("Choose one" = "", "Arimametric4",
"Arimametric5",
"Arimametric6")
}
else if (input$service == "Arimaservice3"){
y <- c("Choose one" = "", "Arimametric7",
"Arimametric8",
"Arimametric9")
}
else if (input$service == "ESTservice1"){
y <- c("Choose one" = "", "ESTmetric1",
"ESTmetric2",
"ESTmetric3")
}
else if (input$service == "ESTservice2"){
y <- c("Choose one" = "", "ESTmetric4",
"ESTmetric5",
"ESTmetric6")
}
else if (input$service == "ESTservice3"){
y <- c("Choose one" = "", "ESTmetric7",
"ESTmetric8",
"ESTmetric9")
}
else if (input$service == "ESTservice1"){
y <- c("Choose one" = "", "ESTmetric1",
"ESTmetric2",
"ESTmetric3")
}
else if (input$service == "ESTservice2"){
y <- c("Choose one" = "", "ESTmetric4",
"ESTmetric5",
"ESTmetric6")
}
else if (input$service == "ESTservice3"){
y <- c("Choose one" = "", "ESTmetric7",
"ESTmetric8",
"ESTmetric9")
}
else{
y <- character(0);
}
# Method 1
updatePickerInput(session = session, inputId = "metric",
choices = y)
output$accuracy <-renderText({
acc <- Rtable[Rtable$X3 == input$metric,]
acc <- acc[acc$X2 == input$service,]
acc1 = acc$X4
paste("RMSE = ", substr(acc1, 1, 6), sep="")
})
#output$accuracy <- renderTable(accuracy(beerfit1, beer3))
#output$table2 <- renderTable(summary(beerfit1))
output$overallAccuracy <- renderText({
paste("Overall accuracy = ", substr(accuracy, 1, 6), sep="")
})
}, ignoreInit = TRUE)
#output$dcompPlot <- renderPlot({
#    ds_ts <- ts(wineind, frequency=12)
#    f <- decompose(ds_ts)
#    plot(f)
#})
#output$arimaForecastPlot <- renderPlot({
#fit <- auto.arima(wineind)
#plot(forecast(fit, h=input$time))
# })
output$forecastPlot <- renderImage({
# A temp file to save the output. It will be deleted after renderImage
# sends it, because deleteFile=TRUE.
outfile <- tempfile(fileext='.png')
# Generate a png
png(outfile, width=200, height=200)
# Return a list
fileName = paste(input$service, input$metric, input$time, ".png", sep="")
list(src = fileName,
alt = "")
}, deleteFile = FALSE)
#beer2 <- window(ausbeer,start=1992,end=c(2007,4))
#beerfit1 <- meanf(beer2,h=10)
#beer3 <- window(ausbeer, start=2008)
}
# Run the application
shinyApp(ui = ui, server = server)
library(lubridate)
library(tidyverse)
library(svDialogs)
library(reticulate)
library(tensorflow)
library(shiny)
library(fpp2)
library(scales)
library(shiny)
library(datasets)
library(forecast)
library(shinyWidgets)
# Define UI for application that draws a histogram
ui <- fluidPage(
tags$head(tags$style("#accuracy{
font-size: 40px;
text-align: center;
display: block;
padding-top: 60px;
}"
),
tags$style("#overallAccuracy{
font-size: 40px;
text-align: center;
display: block;
padding-top: 60px;
}"
),
tags$style("h1{
font-size: 50px;
text-align: center;
display: block;
padding-top: 30px;
}"
),
),
h1("Paychex Service Resource Analyser", align = "center"),
br(),
br(),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
pickerInput("model", "Choose a model:",
list(`Machine-learning` = list("Choose one" = "","Tensorflow"),
`Time-series` = list("Choose one" = "","ARIMA", "ETS", "Seasonal naive"),
`Linear regression` = list("placeholder4", "placeholder5", "placeholder6"))
),
pickerInput("service", "Choose a service:",c("Choose one" = "", "placeholder 1",
"placeholder 2",
"placeholder 3")),
pickerInput("metric", "Choose a metric:",c("Choose one" = "", "placeholder 1",
"placeholder 2",
"placeholder 3")),
sliderInput(
"time", "Hours to Forecast Ahead:",
min = 1, max = 10,
value = 1),
#div(submitButton("Update View"), align = "right"),
),
# Show plots
mainPanel(
tabsetPanel(
#tabPanel("Exponetial Smoothing (ETS) Forecast", plotOutput("etsForecastPlot")),
tabPanel("Forecast Plot", plotOutput("forecastPlot")),
#tabPanel("Timeseries Decomposition", plotOutput("dcompPlot")),
#tabPanel('Accuracy Analysis', tableOutput("accuracy")),
tabPanel('Root Mean Square Error (RMSE)',textOutput("accuracy")),
tabPanel('Overall Accuracy',textOutput("overallAccuracy")),
tabPanel('Help',"After selecting the model, select the service and metric to view relevant information. If the model has gray/black sections, this indicates there was no data available for that time period.")
),
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output, session) {
observeEvent(input$model, {
if (input$model == "ARIMA"){
x <- c("Choose one" = "", "Arimaservice1",
"Arimaservice2",
"Arimaservice3")
}
else if (input$model == "Tensorflow"){
x <- serviceList
}
else if (input$model == "ETS"){
x <- c("Choose one" = "", "ESTservice1",
"ESTservice2",
"ESTservice3")
}
else if (input$model == "Seasonal naive"){
x <- c("Choose one" = "", "Seasonalservice1",
"Seasonalservice2",
"Seasonalservice3")
}
else{
x <- character(0);
}
updatePickerInput(session = session, inputId = "service",
choices = x)
}, ignoreInit = TRUE)
observeEvent(input$service, {
if (input$model == "Tensorflow"){
y <- metricList
}
else if (input$service == "Arimaservice1"){
y <- c("Choose one" = "", "Arimametric1",
"Arimametric2",
"Arimametric3")
}
else if (input$service == "Arimaservice2"){
y <- c("Choose one" = "", "Arimametric4",
"Arimametric5",
"Arimametric6")
}
else if (input$service == "Arimaservice3"){
y <- c("Choose one" = "", "Arimametric7",
"Arimametric8",
"Arimametric9")
}
else if (input$service == "ESTservice1"){
y <- c("Choose one" = "", "ESTmetric1",
"ESTmetric2",
"ESTmetric3")
}
else if (input$service == "ESTservice2"){
y <- c("Choose one" = "", "ESTmetric4",
"ESTmetric5",
"ESTmetric6")
}
else if (input$service == "ESTservice3"){
y <- c("Choose one" = "", "ESTmetric7",
"ESTmetric8",
"ESTmetric9")
}
else if (input$service == "ESTservice1"){
y <- c("Choose one" = "", "ESTmetric1",
"ESTmetric2",
"ESTmetric3")
}
else if (input$service == "ESTservice2"){
y <- c("Choose one" = "", "ESTmetric4",
"ESTmetric5",
"ESTmetric6")
}
else if (input$service == "ESTservice3"){
y <- c("Choose one" = "", "ESTmetric7",
"ESTmetric8",
"ESTmetric9")
}
else{
y <- character(0);
}
# Method 1
updatePickerInput(session = session, inputId = "metric",
choices = y)
output$accuracy <-renderText({
acc <- Rtable[Rtable$X3 == input$metric,]
acc <- acc[acc$X2 == input$service,]
acc1 = acc$X4
paste("RMSE = ", substr(acc1, 1, 6), sep="")
})
#output$accuracy <- renderTable(accuracy(beerfit1, beer3))
#output$table2 <- renderTable(summary(beerfit1))
output$overallAccuracy <- renderText({
paste("Overall accuracy = ", substr(accuracy, 1, 6), sep="")
})
}, ignoreInit = TRUE)
#output$dcompPlot <- renderPlot({
#    ds_ts <- ts(wineind, frequency=12)
#    f <- decompose(ds_ts)
#    plot(f)
#})
#output$arimaForecastPlot <- renderPlot({
#fit <- auto.arima(wineind)
#plot(forecast(fit, h=input$time))
# })
output$forecastPlot <- renderImage({
# A temp file to save the output. It will be deleted after renderImage
# sends it, because deleteFile=TRUE.
outfile <- tempfile(fileext='.png')
# Generate a png
png(outfile, width=200, height=200)
# Return a list
fileName = paste(input$service, input$metric, input$time, ".png", sep="")
list(src = fileName,
alt = "")
}, deleteFile = FALSE)
#beer2 <- window(ausbeer,start=1992,end=c(2007,4))
#beerfit1 <- meanf(beer2,h=10)
#beer3 <- window(ausbeer, start=2008)
}
# Run the application
shinyApp(ui = ui, server = server)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
library(tensorflow)
knitr::opts_chunk$set(echo = TRUE)
library(lubridate)
library(tidyverse)
library(svDialogs)
#r/python to rshiny
serviceList <- as.list(py$listServices)
metricList <- as.list(py$listMetrics)
typeof(serviceList)
accuracy = py$accuracy
Rtable = py$table
Rtable <- data.frame(matrix(unlist(Rtable), nrow=168))
library(lubridate)
library(tidyverse)
library(svDialogs)
library(reticulate)
library(tensorflow)
library(shiny)
library(fpp2)
library(scales)
library(shiny)
library(datasets)
library(forecast)
library(shinyWidgets)
# Define UI for application that draws a histogram
ui <- fluidPage(
tags$head(tags$style("#accuracy{
font-size: 40px;
text-align: center;
display: block;
padding-top: 60px;
}"
),
tags$style("#overallAccuracy{
font-size: 40px;
text-align: center;
display: block;
padding-top: 60px;
}"
),
tags$style("h1{
font-size: 50px;
text-align: center;
display: block;
padding-top: 30px;
}"
),
),
h1("Paychex Service Resource Analyser", align = "center"),
br(),
br(),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
pickerInput("model", "Choose a model:",
list(`Machine-learning` = list("Choose one" = "","Tensorflow"),
`Time-series` = list("Choose one" = "","ARIMA", "ETS", "Seasonal naive"),
`Linear regression` = list("placeholder4", "placeholder5", "placeholder6"))
),
pickerInput("service", "Choose a service:",c("Choose one" = "", "placeholder 1",
"placeholder 2",
"placeholder 3")),
pickerInput("metric", "Choose a metric:",c("Choose one" = "", "placeholder 1",
"placeholder 2",
"placeholder 3")),
sliderInput(
"time", "Hours to Forecast Ahead:",
min = 1, max = 10,
value = 1),
#div(submitButton("Update View"), align = "right"),
),
# Show plots
mainPanel(
tabsetPanel(
#tabPanel("Exponetial Smoothing (ETS) Forecast", plotOutput("etsForecastPlot")),
tabPanel("Forecast Plot", plotOutput("forecastPlot")),
#tabPanel("Timeseries Decomposition", plotOutput("dcompPlot")),
#tabPanel('Accuracy Analysis', tableOutput("accuracy")),
tabPanel('Root Mean Square Error (RMSE)',textOutput("accuracy")),
tabPanel('Overall Accuracy',textOutput("overallAccuracy")),
tabPanel('Help',"After selecting the model, select the service and metric to view relevant information. If the model has gray/black sections, this indicates there was no data available for that time period.")
),
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output, session) {
observeEvent(input$model, {
if (input$model == "ARIMA"){
x <- c("Choose one" = "", "Arimaservice1",
"Arimaservice2",
"Arimaservice3")
}
else if (input$model == "Tensorflow"){
x <- serviceList
}
else if (input$model == "ETS"){
x <- c("Choose one" = "", "ESTservice1",
"ESTservice2",
"ESTservice3")
}
else if (input$model == "Seasonal naive"){
x <- c("Choose one" = "", "Seasonalservice1",
"Seasonalservice2",
"Seasonalservice3")
}
else{
x <- character(0);
}
updatePickerInput(session = session, inputId = "service",
choices = x)
}, ignoreInit = TRUE)
observeEvent(input$service, {
if (input$model == "Tensorflow"){
y <- metricList
}
else if (input$service == "Arimaservice1"){
y <- c("Choose one" = "", "Arimametric1",
"Arimametric2",
"Arimametric3")
}
else if (input$service == "Arimaservice2"){
y <- c("Choose one" = "", "Arimametric4",
"Arimametric5",
"Arimametric6")
}
else if (input$service == "Arimaservice3"){
y <- c("Choose one" = "", "Arimametric7",
"Arimametric8",
"Arimametric9")
}
else if (input$service == "ESTservice1"){
y <- c("Choose one" = "", "ESTmetric1",
"ESTmetric2",
"ESTmetric3")
}
else if (input$service == "ESTservice2"){
y <- c("Choose one" = "", "ESTmetric4",
"ESTmetric5",
"ESTmetric6")
}
else if (input$service == "ESTservice3"){
y <- c("Choose one" = "", "ESTmetric7",
"ESTmetric8",
"ESTmetric9")
}
else if (input$service == "ESTservice1"){
y <- c("Choose one" = "", "ESTmetric1",
"ESTmetric2",
"ESTmetric3")
}
else if (input$service == "ESTservice2"){
y <- c("Choose one" = "", "ESTmetric4",
"ESTmetric5",
"ESTmetric6")
}
else if (input$service == "ESTservice3"){
y <- c("Choose one" = "", "ESTmetric7",
"ESTmetric8",
"ESTmetric9")
}
else{
y <- character(0);
}
# Method 1
updatePickerInput(session = session, inputId = "metric",
choices = y)
output$accuracy <-renderText({
acc <- Rtable[Rtable$X3 == input$metric,]
acc <- acc[acc$X2 == input$service,]
acc1 = acc$X4
paste("RMSE = ", substr(acc1, 1, 6), sep="")
})
#output$accuracy <- renderTable(accuracy(beerfit1, beer3))
#output$table2 <- renderTable(summary(beerfit1))
output$overallAccuracy <- renderText({
paste("Overall accuracy = ", substr(accuracy, 1, 6), sep="")
})
}, ignoreInit = TRUE)
#output$dcompPlot <- renderPlot({
#    ds_ts <- ts(wineind, frequency=12)
#    f <- decompose(ds_ts)
#    plot(f)
#})
#output$arimaForecastPlot <- renderPlot({
#fit <- auto.arima(wineind)
#plot(forecast(fit, h=input$time))
# })
output$forecastPlot <- renderImage({
# A temp file to save the output. It will be deleted after renderImage
# sends it, because deleteFile=TRUE.
outfile <- tempfile(fileext='.png')
# Generate a png
png(outfile, width=200, height=200)
# Return a list
fileName = paste(input$service, input$metric, input$time, ".png", sep="")
list(src = fileName,
alt = "")
}, deleteFile = FALSE)
#beer2 <- window(ausbeer,start=1992,end=c(2007,4))
#beerfit1 <- meanf(beer2,h=10)
#beer3 <- window(ausbeer, start=2008)
}
# Run the application
shinyApp(ui = ui, server = server)
